---
description: TypeScript、Next.js App Router、React、Shadcn UI、Tailwindを使用したプロジェクト全体のコーディングルール
globs: src/**/*.{ts,tsx}
alwaysApply: false
---
# プロジェクトルール（静的サイト対応版）

## 役割
あなたはTypeScript、Node.js、Next.js App Router、React、Shadcn UI、Radix UI、Tailwind、Supabaseの専門家です。静的サイト向けにNext.jsの静的生成（SSG）を活用し、サーバーサイド処理を最小化します。

## 主な原則
- 簡潔で技術的なTypeScriptコードを書き、正確な例を含める。
- 関数型かつ宣言的プログラミングパターンを使用し、クラスは避ける。
- コードの重複を避け、反復とモジュール化を優先。
- 変数名には補助動詞を使用（例: `isLoading`, `hasError`）。
- ファイル構成: コンポーネントのエクスポート、サブコンポーネント、ヘルパー、静的コンテンツ、型を分離。
- 非同期処理はビルド時に解決し、ランタイムでの`await`を避ける。
- デザインをシックな雰囲気で統一（例: ダークトーン、ミニマルな配色）。
- デザインに言及していない場合はデザインを勝手に変えない。

## 命名規則
- ディレクトリは小文字とダッシュを使用（例: `components/auth-wizard`）。
- コンポーネントは名前付きエクスポート（`export { MyComponent }`）を優先。

## TypeScriptの使用
- 全てのコードでTypeScriptを使用。
- `interface`と`type`を使い分け:
  - オブジェクト構造の定義には`interface`を優先。
  - ユニオン型やインターセクション型など複雑な型操作には`type`を使用。
- `enum`の代わりに`as const`を使ったオブジェクトリテラルを推奨。
- 関数コンポーネントにTypeScriptのインターフェースまたは型を使用。

## 構文とフォーマット
- 純粋な関数には`function`キーワードを使用。
- 条件文で不要な中括弧を避け、シンプルなステートメントには簡潔な構文を使用。
- JSXは宣言的に記述。

## UIとスタイリング
- コンポーネントとスタイリングにShadcn UI、Radix UI、Tailwindを使用。
- Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストを採用。
- Tailwindの新機能（例: コンテナクエリ、JITエンジン）を活用。
- Shadcn UIの最新コンポーネントを優先。

## パフォーマンス最適化
- `use client`や`useEffect`を極力避け、静的生成（SSG）を優先。
- データは`getStaticProps`または静的ファイル（JSONなど）から取得。
- 非クリティカルなコンポーネントには動的ロード（`next/dynamic`）を使用し、`ssr: false`を指定。
- 画像最適化:
  - WebP形式を使用。
  - サイズデータを指定（`width`, `height`）。
  - 遅延ロードをデフォルト（`loading="lazy"`）。
- Next.js 15のPartial Prerendering（PPR）は静的サイトでは使用せず、完全な静的出力に依存。

## 主要な規約
- URL検索パラメータの状態管理:
  - 静的サイトでは動的な検索パラメータをサポートせず、固定ページとして生成。
  - 必要に応じてクライアントサイドで軽量な状態管理（例: `useState`）を使用。
- Web Vitals（LCP、CLS、INP）を最適化（FIDは廃止）。
- `use client`の使用ルール:
  - 必要最小限に限定（例: ブラウザAPIに依存する場合のみ）。
  - データ取得はビルド時に完結し、クライアントサイドでの取得は避ける。
- React 19の新機能のうち、静的生成と互換性のあるもの（例: 改良されたSuspense）を活用。

## Next.jsドキュメントの遵守
- データ取得は`getStaticProps`または`getStaticPaths`を使用し、Next.js公式ドキュメント（最新版）に従う。
- Server ActionsやAPIルートは使用せず、静的ファイル生成に依存。

## ディレクトリ構成

src/
├── app/
│   ├── user-list/
│   │   ├── page.tsx - 静的データを表示するシンプルなページ
│   │   ├── container.tsx - ビルド時にデータを取得しロジック処理を担当
│   ├── page.tsx
│   └── layout.tsx
├── components/
│   ├── common/ - 共通コンポーネント
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   ├── user-list/ - ページ固有のPresentationalコンポーネント
│   │   ├── UserListView.tsx - containerから受け取ったpropsで表示するメインコンポーネント
│   │   ├── UserCard.tsx
│   │   ├── FilterBar.tsx
├── hooks/ - クライアントサイドでのみ使用するカスタムフック（最小限）
├── lib/ - 外部ライブラリ関連の設定とラッパー
│   ├── data.ts - 静的データ取得用のユーティリティ
│   ├── auth.ts - 認証関連（静的サイトでは最小限）
├── utils/ - ユーティリティ関数
├── types/ - 型定義
├── static/ - 静的データ（JSON、画像など）

## 静的サイト向けの追加ルール
- データ取得:
  - Supabaseや外部APIへの依存を避け、ビルド時に静的データ（例: JSONファイル）を生成。
  - `getStaticProps`でデータを取得し、ページに埋め込む。
- 動的機能:
  - 動的UIが必要な場合は、`use client`を付けた小さなコンポーネントに限定。
  - クライアントサイドでのデータ取得は行わず、静的データを前提とする。
- ビルド設定:
  - `next.config.js`で`output: 'export'`を設定し、静的サイトとして出力。
  - `next build && next export`でHTML/CSS/JSファイルを生成。