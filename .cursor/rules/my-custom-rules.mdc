---
description: TypeScript、Next.js App Router、React、Shadcn UI、Tailwindを使用したプロジェクト全体のコーディングルール
globs: src/**/*.{ts,tsx}
alwaysApply: false
---
# プロジェクトルール

## 役割
あなたはTypeScript、Node.js、Next.js App Router、React、Shadcn UI、Radix UI、Tailwind、Supabaseの専門家です。

## 主な原則
- 簡潔で技術的なTypeScriptコードを書き、正確な例を含める。
- 関数型かつ宣言的プログラミングパターンを使用し、クラスは避ける。
- コードの重複を避け、反復とモジュール化を優先。
- 変数名には補助動詞を使用（例: `isLoading`, `hasError`）。
- ファイル構成: コンポーネントのエクスポート、サブコンポーネント、ヘルパー、静的コンテンツ、型を分離。
- バグの原因を発見しやすいよう適宜`console.log`でデバッグコードを挿入。
- `users`テーブルはClerk経由でのユーザー登録時にユーザーを一意に決めるもので、その後は基本参照しない。
- 非同期で返されるパラメータは必ず`await`で解決し、オブジェクトの分割代入を用いて必要なプロパティを抽出。
- デザインをシックな雰囲気で統一（例: ダークトーン、ミニマルな配色）。
- デザインに言及していない場合はデザインを勝手に変えない。

## 命名規則
- ディレクトリは小文字とダッシュを使用（例: `components/auth-wizard`）。
- コンポーネントは名前付きエクスポート（`export { MyComponent }`）を優先。

## TypeScriptの使用
- 全てのコードでTypeScriptを使用。
- `interface`と`type`を使い分け:
  - オブジェクト構造の定義には`interface`を優先。
  - ユニオン型やインターセクション型など複雑な型操作には`type`を使用。
- `enum`の代わりに`as const`を使ったオブジェクトリテラルを推奨。
- 関数コンポーネントにTypeScriptのインターフェースまたは型を使用。

## 構文とフォーマット
- 純粋な関数には`function`キーワードを使用。
- 条件文で不要な中括弧を避け、シンプルなステートメントには簡潔な構文を使用。
- JSXは宣言的に記述。

## UIとスタイリング
- コンポーネントとスタイリングにShadcn UI、Radix UI、Tailwindを使用。
- Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストを採用。
- Tailwindの新機能（例: コンテナクエリ、JITエンジン）を活用。
- Shadcn UIの最新コンポーネントを優先。

## パフォーマンス最適化
- `use client`、`useEffect`、`setState`を最小限にし、React Server Components（RSC）を優先。
- クライアントコンポーネントは`Suspense`でラップし、フォールバックを指定。
- 非クリティカルなコンポーネントには動的ロードを使用。
- 画像最適化:
  - WebP形式を使用。
  - サイズデータを指定（`width`、`height`）。
  - 遅延ロードをデフォルト（`loading="lazy"`）。
- Next.js 15のPartial Prerendering（PPR）を活用し、静的/動的コンテンツを分離。

## 主要な規約
- URL検索パラメータの状態管理:
  - デフォルトでNext.jsの`useSearchParams`を使用。
  - 複雑な型安全パースが必要な場合に限り`nuqs`を採用。
- Web Vitals（LCP、CLS、INP）を最適化（FIDは廃止）。
- `use client`の使用ルール:
  - サーバーコンポーネントとNext.js SSRを優先。
  - Web APIアクセス（例: `window`）や動的UIが必要な小さなコンポーネントでのみ使用。
  - データ取得はServer ComponentsまたはServer Actionsで優先し、クライアント側での取得は動的更新に限定。
- React 19の新機能（例: `use`フック、改良された`Suspense`）を活用。

## Next.jsドキュメントの遵守
- データ取得、レンダリング、ルーティングはNext.js公式ドキュメント（最新版）に従う。
- Server Actionsを活用しつつ、必要に応じてAPIルートを併用。

## ディレクトリ構成
src/
├── app/
│   ├── user-list/
│   │   ├── page.tsx - コンテナを呼び出すだけのシンプルなページ
│   │   ├── container.tsx - データ取得とロジック処理を担当
│   │   └── actions.ts - ページ固有のServer Actions
│   ├── page.tsx
│   └── layout.tsx
├── components/
│   ├── common/ - 共通コンポーネント
│   │   ├── Button.tsx
│   │   ├── Card.tsx
│   ├── user-list/ - ページ固有のPresentationalコンポーネント
│   │   ├── UserListView.tsx - containerから受け取ったpropsで表示するメインコンポーネント
│   │   ├── UserCard.tsx
│   │   ├── FilterBar.tsx
├── hooks/ - アプリ全体で使用するカスタムフック
├── lib/ - 外部ライブラリ関連の設定とラッパー
│   ├── api.ts - API関連のユーティリティ
│   ├── auth.ts - 認証関連
├── utils/ - ユーティリティ関数
├── types/ - 型定義
├── middleware.ts


